{"meta":{"Title":"Static blog using React and Flux","Date":"2014-11-22T00:00:00.000Z","Tags":["react","dev"],"slug":"flux-static-blog"},"html":"<p>I have enjoyed the simplicity of static blog generators in the past, but I have always loved creating my personal website with front-end technologies that I love. However, I always felt restricted by the framework (Jekyll) and by having to maintain the back-end (express, flask, django). </p>\n<p>Today, I started to remake my website again, using React. However, this time, the website will be static. I wanted this because the back-end for my site has been shrinking more and more as I started using front-end technologies like AngularJS and React, and at this point all I need is a file server.</p>\n<p>I placed the content of my site, both pages and blog posts, under the <code>assets/posts</code> directory:</p>\n<pre><code>- assets\n  - posts\n    - about.md\n    - projects.md\n    - flux-static-blog.md\n</code></pre><p>The markdown/yaml format for a <code>post</code> looks like this:</p>\n<pre><code>---\nTitle: Projects\nPage: true\n---\n\n## Android apps\n.....\n</code></pre><p>In my GulpFile, I have task that processes all the markdown code in the <code>assets/posts</code> directory into html and metadata and serializes it into a JSON string:</p>\n<pre><code>var files = fs.readdirSync(&#39;./app/assets/posts&#39;);\nvar list = files.map(function(e) {\n  var content = fs.readFileSync(&#39;./app/assets/posts/&#39; + e, {encoding: &#39;utf8&#39;});\n  var markdown = marked(content);\n\n  markdown.meta.slug = e.split(&#39;.md&#39;)[0];\n  return markdown;\n});\nbuild_options.json = JSON.stringify(list);\n</code></pre><p>Then I inject that JSON string into my main file:</p>\n<pre><code>&lt;script&gt;\n  window[&#39;app_initial_data&#39;] = &lt;!-- @echo json --&gt;\n&lt;/script&gt;\n</code></pre><p>Of course, this isn&#39;t scalable when there is tons of data, so I have the ability to asynchronously inject posts into my app on the front-end:</p>\n<pre><code>app_initial_data.forEach(function(post) {\n  actions.receivedPost(post);\n});\n</code></pre><p>Eventually, as it becomes necessary, I can use AJAX to dynamically inject posts into my app as it requests them. There are multiple ways of going about doing this. I could write a REST app that serves JSON to my front-end app, but then my front-end becomes coupled to a server implementing that API. </p>\n<p>Another option would be to serialize &quot;chunks&quot; of post data into multiple JSON files, <code>posts-1.json, posts-2.json, etc</code>, and make standard ajax calls to the JSON files as needed by convention. </p>\n<p>This has the advantage of being automatically cached by a good static HTTP server, as well as retaining the ability to host the static site anywhere that allows static file hosting (such as github pages, dropbox, etc).</p>\n"}