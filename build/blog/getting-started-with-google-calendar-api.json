{"meta":{"Title":"Getting started with Google Calendar API","Date":"2014-11-24T00:00:00.000Z","Tags":["apis","dev"],"slug":"getting-started-with-google-calendar-api"},"html":"<p>I have begun experimenting with <a href=\"https://developers.google.com/google-apps/app-apis\">Google Apps Application APIs</a>, with the intention of building a Javascript client-side application to interface with Google Calendar. I&#39;m going to demonstrate what I&#39;ve learned with a scenario flow for accessing the Google Calendar REST API.</p>\n<h2 id=\"what-i-ve-learned\">What I&#39;ve learned</h2>\n<p>Google APIs use the OAuth 2.0 protocol for authentication and authorization. In this scenario, <em>Authentication</em> is the process of verifying the identity of a user, and <em>Authorization</em> is the process of determing which actions are allowed, usually based on the identity of the user. They are usually both referred to as <em>auth</em>, because both are requirements that are central to the security of a system. To understand more about the OAuth2 protocol, refer to <a href=\"http://aaronparecki.com/articles/2012/07/29/1/oauth2-simplified\">this</a> guide.</p>\n<h2 id=\"steps\">Steps</h2>\n<p>In this scenario, we will use Google APIs OAuth2 protocol to request an authorization token, which will allow us to access the <a href=\"https://developers.google.com/google-apps/calendar/firstapp\">Google Calendar API</a></p>\n<h3 id=\"setting-up-the-service\">Setting up the service</h3>\n<p>We need to set up the service (google) so it will recognize the client.</p>\n<ol>\n<li>First, go to the <a href=\"https://console.developers.google.com/project\">Google Developers Console</a> and set up a new Project.</li>\n<li>Click on the Project to select it,</li>\n<li>Afterwards, click on the <strong>Credentials</strong> item in the menu, under the <strong>APIs &amp; Auth</strong> section of the menu.</li>\n<li>Click the <strong>Create new Client ID</strong> button.</li>\n<li>Select <strong>Installed Application</strong></li>\n</ol>\n<p>On the page, you will see a section titled <strong>Client ID for native application</strong>. Within the section, there should be 3 items:</p>\n<ol>\n<li>Client ID</li>\n<li>Client Secret</li>\n<li>Redirect URIs</li>\n</ol>\n<p>Next, click on <strong>Consent screen</strong> under the <strong>APIs &amp; Auth</strong> section of the menu, and create your consent screen. Be sure to choose a support email address. This screen is what the user will see when he or she authenticates with the Google OAuth2 protocol.</p>\n<h3 id=\"getting-an-authorization-code\">Getting an authorization code</h3>\n<p>The authorization code is used to request a Google APIs Authorization token from Google&#39;s OAuth2 protocol.</p>\n<p>Make a GET request to this URI: <code>https://accounts.google.com/o/oauth2/auth</code></p>\n<p>Provide these query parameters:</p>\n<ol>\n<li><em>response_type</em>=code<ul>\n<li>This is to tell the service that we want an authorization code</li>\n</ul>\n</li>\n<li><em>client_id</em>=[Your Client ID]</li>\n<li><em>redirect_uri</em>=urn:ietf:wg:oauth:2.0:oob<ul>\n<li>I&#39;ll explain this later</li>\n</ul>\n</li>\n<li><em>scope</em>=<a href=\"https://www.googleapis.com/auth/calendar\">https://www.googleapis.com/auth/calendar</a></li>\n</ol>\n<p>Your request should look like this:</p>\n<pre><code>https://accounts.google.com/o/oauth2/auth?response_type=code&amp;client_id=[Your CLIENTID]&amp;redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&amp;scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcalendar\n</code></pre><p>This will redirect to a page where the user can log into Google and grant access to your app.</p>\n<p>After you grant access to your app, it will redirect you to a special page with an authorization code. This is why we chose <code>urn:ietf:wg:oauth:2.0:oob</code> as the <code>redirect_uri</code>. With this code, the application can request an <em>Authorization Token</em> from Google APis.</p>\n<p>Be sure to copy the authorization code, we will use this in the next step.</p>\n<h3 id=\"getting-an-authorization-token\">Getting an authorization token</h3>\n<p>Make a POST request to this URI: <code>https://accounts.google.com/o/oauth2/token</code></p>\n<p>In the header, set <code>Content-Type</code> to <code>application/x-www-form-urlencoded</code>.\nIn the request body, set these parameters:</p>\n<ol>\n<li><em>code</em>=[Authorization code from pervious step]</li>\n<li><em>client_id</em>=[Your Client ID]</li>\n<li><em>grant_type</em>=authorization_code</li>\n<li><em>secret</em>=[Your Client Secret]</li>\n<li><em>redirect_uri</em>urn:ietf:wg:oauth:2.0:oob</li>\n</ol>\n<p>After you make this request, you will get a JSON response. In the body data, there will be a property called <code>access_token</code>. This is the token we will use to access the Google Calendar API.</p>\n<h3 id=\"making-an-api-request-\">Making an API request.</h3>\n<p>Make a GET request to this URI:\n<code>https://www.googleapis.com/calendar/v3/users/me/calendarList</code></p>\n<p>In the header, set <code>Authorization</code> to <code>Bearer [Your Token]</code></p>\n<p>After you make this request, you will get a JSON response containing the user&#39;s calendar list on Google Calendar. To understand this response, consult Google&#39;s <a href=\"https://developers.google.com/google-apps/calendar/v3/reference/calendarList#resource\">Resource Representation for CalendarList</a>.</p>\n<p>For general API documentation, see <a href=\"https://developers.google.com/google-apps/calendar/v3/reference/\">this reference</a>.</p>\n<h3 id=\"play-with-the-api-explorer\">Play with the API explorer</h3>\n<p>Visit the <a href=\"https://developers.google.com/apis-explorer/#s/calendar/v3/\">Calendar API explorer</a> to explore the API without needing to write any code.  </p>\n"}